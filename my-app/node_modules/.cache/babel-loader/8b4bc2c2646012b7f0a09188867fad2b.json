{"ast":null,"code":"// import React from 'react'\n// import Form from 'react-bootstrap/Form'\n// import Row from 'react-bootstrap/Row'\n// import Col from 'react-bootstrap/Col'\n// import Button from 'react-bootstrap/Button'\n// import ReactDOM from 'react-dom'\n// import axios from \"axios\";\n//\n// class Hook extends React.Component {\n//   constructor(props) {\n//     super(props)\n//\n//     this.state = {\n//       currentProperty: {},\n//       currentName: props.selectedProduct != null ? props.selectedProduct.hooks[props.id] : '',\n//       loaded: false\n//     }\n//\n//     if (this.props.productIds[0] != null) {\n//       axios.get(\"http://localhost:5000/hooks/getProperties/\" + (this.props.selectedProduct != null && this.props.selectedProduct.properties[this.props.id] != null ? this.props.productIds[this.props.productNames.indexOf(this.props.selectedProduct.hooks[this.props.id])] : this.props.productIds[0]))\n//         .then(response => {\n//           this.setState({\n//             currentProperty: response.data\n//           })\n//         })\n//     }\n//\n//     this.displayProperties = this.displayProperties.bind(this)\n//     this.renderHooks = this.renderHooks.bind(this)\n//   }\n//\n//   displayProperties(event) {\n//     this.setState({\n//       currentName: event.target.value\n//     })\n//     axios.get(\"http://localhost:5000/hooks/getProperties/\" + this.props.productIds[event.target.selectedIndex])\n//       .then(response => {\n//         this.setState({\n//           currentProperty: response.data\n//         })\n//       })\n//   }\n//\n//   renderHooks() {\n//     var hooks = []\n//\n//\n//     hooks.push(<Col md = {3}>\n//       <Form.Label>Product</Form.Label>\n//       <Form.Select onChange={this.displayProperties} className=\"form-control hooks-field\" id=\"hooks-select\" value={this.state.currentName}>\n//         {this.props.productNames.map(product => <option>{product}</option>)}\n//       </Form.Select>\n//     </Col>)\n//\n//     var properties = this.state.currentProperty\n//     var keys = Object.keys(properties)\n//\n//     for (var i = 0; i < keys.length; i++) {\n//       var selections = properties[keys[i]].map(property => <option>{property}</option>)\n//       selections.unshift(<option>{'Any'}</option>)\n//\n//       if (this.props.selectedProduct != null && this.props.selectedProduct.properties[this.props.id] != null) {\n//         selections = selections.filter(option => option.props.children != this.props.selectedProduct.properties[this.props.id][keys[i]])\n//         selections.unshift(<option>{this.props.selectedProduct.properties[this.props.id][keys[i]]}</option>)\n//       }\n//\n//       hooks.push(<Col md = {3}>\n//         <Form.Label id = \"property-select\">{keys[i]}</Form.Label>\n//         <Form.Select id = \"property-select\" className = \"hooks-field\">\n//           {selections}\n//         </Form.Select>\n//       </Col>)\n//     }\n//     hooks.push(<Col md = {3}>\n//       <Form.Label className = \"end\" id = \"property-select\">Loss per Order</Form.Label>\n//       <Form.Control id = \"property-select\" type=\"number\" placeholder=\"Enter Number\" className=\"losses-select hooks-field\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.losses[this.props.id] : ''}/>\n//     </Col>)\n//\n//     const noRows = Math.ceil(hooks.length / 4);\n//\n//     return Array.from(Array(noRows)).map((n, i) => (\n//       <Row>\n//        {hooks.slice(i* 4, (i + 1)* 4)}\n//       </Row>\n//     ));\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         {this.renderHooks()}\n//       </div>\n//     )\n//   }\n//\n//   UNSAFE_componentWillReceiveProps(nextProps) {\n//     if (this.props.productNames.length == 0) {\n//       axios.get(\"http://localhost:5000/hooks/getProperties/\" + (nextProps.selectedProduct != null && nextProps.selectedProduct.properties[nextProps.id] != null ? nextProps.productIds[nextProps.productNames.indexOf(nextProps.selectedProduct.hooks[nextProps.id])] : nextProps.productIds[0]))\n//         .then(response => {\n//           console.log(response.data)\n//           this.setState({\n//             currentProperty: response.data,\n//             currentName: nextProps.selectedProduct != null ? nextProps.selectedProduct.hooks[nextProps.id] : '',\n//             loaded: true\n//           })\n//         })\n//     }\n//   }\n// }\n//\n// export default class CreatePopup extends React.Component{\n//\n//   constructor(props) {\n//     super(props)\n//\n//     this.state = {\n//       hooks: 1,\n//       edit: false\n//     }\n//\n//     this.addHook = this.addHook.bind(this)\n//     this.hidePopup = this.hidePopup.bind(this)\n//     this.createTracker = this.createTracker.bind(this)\n//     this.resetPopup = this.resetPopup.bind(this)\n//     this.renderHooks = this.renderHooks.bind(this)\n//     this.validateFields = this.validateFields.bind(this)\n//   }\n//\n//   resetPopup() {\n//     document.querySelectorAll('.pForm').forEach(form => {\n//       console.log(form)\n//       form.reset()\n//     })\n//\n//     this.setState({\n//       hooks: 1\n//     })\n//   }\n//\n//   hidePopup() {\n//       document.querySelector('.popup-wrapper').style.display = \"none\"\n//       document.querySelector(\"body\").style.overflow = \"visible\";\n//       this.resetPopup()\n//   }\n//\n//   async createTracker() {\n//\n//     if (!this.validateFields()) {\n//       alert(\"Please fill out all fields\")\n//     }\n//     else {\n//       document.querySelector('.loading-wrapper').style.display = \"initial\"\n//\n//       var newTracker = {}\n//       var fieldNames = [\"name\", \"qty\", 'link']\n//       var fieldValues = document.querySelectorAll('.popup-form')\n//\n//       for (var i = 0; i < fieldNames.length; i++) {\n//         newTracker[fieldNames[i]] = fieldValues[i].value\n//       }\n//\n//       newTracker.hooks = Array.from(document.querySelectorAll('#hooks-select')).map(hook => hook.value)\n//       newTracker.losses = Array.from(document.querySelectorAll('.losses-select')).map(loss => loss.value)\n//\n//       var properties = []\n//       var propertyList = document.querySelectorAll('#property-select')\n//       var property = {}\n//       for (var i = 0; i < propertyList.length; i += 2) {\n//\n//         if (propertyList[i].classList.contains(\"end\")) {\n//\n//           properties.push(property)\n//           property = {}\n//         }\n//         else {\n//           property[propertyList[i].innerText] = propertyList[i + 1].value\n//         }\n//       }\n//\n//       newTracker.properties = properties\n//\n//       if (this.props.selectedProduct == null) {\n//         axios.post(\"http://localhost:5000/trackers/addTracker\", newTracker)\n//           .then(res => {\n//             newTracker._id = res.data._id\n//             newTracker.imgSrc = res.data.src\n//             newTracker.buyDate = res.data.buyDate\n//\n//             this.props.add(newTracker)\n//\n//             document.querySelector('.loading-wrapper').style.display = \"none\"\n//             this.hidePopup()\n//           })\n//       }\n//       else {\n//         newTracker._id = this.props.selectedProduct._id\n//         newTracker.imgSrc = this.props.selectedProduct.imgSrc\n//\n//         var result = await axios.post(\"http://localhost:5000/trackers/updateTracker/\" + this.props.selectedProduct._id, newTracker)\n//         newTracker.buyDate = result.data.buyDate\n//         this.props.updateProduct(newTracker)\n//\n//         document.querySelector('.loading-wrapper').style.display = \"none\"\n//         this.hidePopup()\n//       }\n//     }\n//   }\n//\n//   addHook() {\n//     this.setState({\n//       hooks: this.state.hooks + 1\n//     })\n//   }\n//\n//   renderHooks() {\n//     var hookList = []\n//\n//     for (var i = 0; i < this.state.hooks; i++) {\n//       hookList.push(<Hook id = {i} key = {i} productNames = {this.props.productNames} productIds = {this.props.productIds} selectedProduct={this.props.selectedProduct} displayProperties={this.displayProperties}/>)\n//     }\n//\n//     return hookList\n//   }\n//\n//   validateFields() {\n//\n//     var textFields = document.querySelectorAll(\".popup-form\")\n//     for (var i = 0; i < textFields.length; i++) {\n//       if (textFields[i].value == \"\") {\n//         return false\n//       }\n//     }\n//\n//     var hookFields = document.querySelectorAll(\".hooks-field\")\n//     for (var i = 0; i < hookFields.length; i++) {\n//       if (hookFields[i].value == \"\") {\n//         return false\n//       }\n//     }\n//     return true\n//   }\n//\n//   render() {\n//     return (\n//       <div class = \"popup-wrapper\">\n//         <div class = \"loading-wrapper\">\n//           <img src = \"https://upload.wikimedia.org/wikipedia/commons/7/7d/Pedro_luis_romani_ruiz.gif\" class = \"popup-loading\"></img>\n//         </div>\n//         <div class = \"popup\">\n//           <svg onClick={this.hidePopup} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n//             <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\n//           </svg>\n//           <h1 class = \"text-center\">{this.props.selectedProduct != null ? 'Edit Tracker' : 'Create Tracker'}</h1>\n//           <Form className = \"pForm\">\n//             <Row>\n//               <Col md = {8}>\n//                 <Form.Label>Name</Form.Label>\n//                 <Form.Control className = \"popup-form\" type=\"text\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.name : ''} placeholder=\"Enter name\" />\n//               </Col>\n//               <Col md = {4}>\n//                 <Form.Label>Starting Quantity</Form.Label>\n//                 <Form.Control className = \"popup-form\" type=\"number\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.qty : ''} placeholder=\"Enter Number\" />\n//               </Col>\n//             </Row>\n//             <Form.Label>Amazon Link</Form.Label>\n//             <Form.Control className = \"popup-form\" type=\"text\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.link : ''} placeholder=\"Enter Link\" />\n//           </Form>\n//\n//           <div class = \"hooks-header\">\n//             <h3>Hooks with Etsy</h3>\n//             <Button onClick = {this.addHook}>Add New Hook</Button>\n//           </div>\n//           <div class = \"hooks\">\n//             <form className = \"pForm\">\n//               {this.renderHooks()}\n//             </form>\n//           </div>\n//\n//           <Button onClick = {this.createTracker} id = \"create-tracker-btn\">{this.props.selectedProduct != null ? 'Edit Tracker' : 'Create Tracker'}</Button>\n//         </div>\n//       </div>\n//     )\n//   }\n//\n//   UNSAFE_componentWillReceiveProps(nextProps) {\n//     if (document.querySelector('.popup-wrapper').style.display == \"initial\") {\n//       document.querySelector(\"body\").style.overflow = \"hidden\";\n//     }\n//\n//     if (nextProps.selectedProduct != null) {\n//       console.log(nextProps.selectedProduct)\n//       this.setState({\n//         hooks: nextProps.selectedProduct.hooks.length\n//       })\n//     }\n//   }\n// }","map":{"version":3,"sources":["C:/Users/Kaiwen Song/Desktop/Etsy-Inventory-Tracker/my-app/src/components/CreatePopup.js"],"names":[],"mappingssourcesContent":["// import React from 'react'\r\n// import Form from 'react-bootstrap/Form'\r\n// import Row from 'react-bootstrap/Row'\r\n// import Col from 'react-bootstrap/Col'\r\n// import Button from 'react-bootstrap/Button'\r\n// import ReactDOM from 'react-dom'\r\n// import axios from \"axios\";\r\n//\r\n// class Hook extends React.Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//\r\n//     this.state = {\r\n//       currentProperty: {},\r\n//       currentName: props.selectedProduct != null ? props.selectedProduct.hooks[props.id] : '',\r\n//       loaded: false\r\n//     }\r\n//\r\n//     if (this.props.productIds[0] != null) {\r\n//       axios.get(\"http://localhost:5000/hooks/getProperties/\" + (this.props.selectedProduct != null && this.props.selectedProduct.properties[this.props.id] != null ? this.props.productIds[this.props.productNames.indexOf(this.props.selectedProduct.hooks[this.props.id])] : this.props.productIds[0]))\r\n//         .then(response => {\r\n//           this.setState({\r\n//             currentProperty: response.data\r\n//           })\r\n//         })\r\n//     }\r\n//\r\n//     this.displayProperties = this.displayProperties.bind(this)\r\n//     this.renderHooks = this.renderHooks.bind(this)\r\n//   }\r\n//\r\n//   displayProperties(event) {\r\n//     this.setState({\r\n//       currentName: event.target.value\r\n//     })\r\n//     axios.get(\"http://localhost:5000/hooks/getProperties/\" + this.props.productIds[event.target.selectedIndex])\r\n//       .then(response => {\r\n//         this.setState({\r\n//           currentProperty: response.data\r\n//         })\r\n//       })\r\n//   }\r\n//\r\n//   renderHooks() {\r\n//     var hooks = []\r\n//\r\n//\r\n//     hooks.push(<Col md = {3}>\r\n//       <Form.Label>Product</Form.Label>\r\n//       <Form.Select onChange={this.displayProperties} className=\"form-control hooks-field\" id=\"hooks-select\" value={this.state.currentName}>\r\n//         {this.props.productNames.map(product => <option>{product}</option>)}\r\n//       </Form.Select>\r\n//     </Col>)\r\n//\r\n//     var properties = this.state.currentProperty\r\n//     var keys = Object.keys(properties)\r\n//\r\n//     for (var i = 0; i < keys.length; i++) {\r\n//       var selections = properties[keys[i]].map(property => <option>{property}</option>)\r\n//       selections.unshift(<option>{'Any'}</option>)\r\n//\r\n//       if (this.props.selectedProduct != null && this.props.selectedProduct.properties[this.props.id] != null) {\r\n//         selections = selections.filter(option => option.props.children != this.props.selectedProduct.properties[this.props.id][keys[i]])\r\n//         selections.unshift(<option>{this.props.selectedProduct.properties[this.props.id][keys[i]]}</option>)\r\n//       }\r\n//\r\n//       hooks.push(<Col md = {3}>\r\n//         <Form.Label id = \"property-select\">{keys[i]}</Form.Label>\r\n//         <Form.Select id = \"property-select\" className = \"hooks-field\">\r\n//           {selections}\r\n//         </Form.Select>\r\n//       </Col>)\r\n//     }\r\n//     hooks.push(<Col md = {3}>\r\n//       <Form.Label className = \"end\" id = \"property-select\">Loss per Order</Form.Label>\r\n//       <Form.Control id = \"property-select\" type=\"number\" placeholder=\"Enter Number\" className=\"losses-select hooks-field\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.losses[this.props.id] : ''}/>\r\n//     </Col>)\r\n//\r\n//     const noRows = Math.ceil(hooks.length / 4);\r\n//\r\n//     return Array.from(Array(noRows)).map((n, i) => (\r\n//       <Row>\r\n//        {hooks.slice(i* 4, (i + 1)* 4)}\r\n//       </Row>\r\n//     ));\r\n//   }\r\n//\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         {this.renderHooks()}\r\n//       </div>\r\n//     )\r\n//   }\r\n//\r\n//   UNSAFE_componentWillReceiveProps(nextProps) {\r\n//     if (this.props.productNames.length == 0) {\r\n//       axios.get(\"http://localhost:5000/hooks/getProperties/\" + (nextProps.selectedProduct != null && nextProps.selectedProduct.properties[nextProps.id] != null ? nextProps.productIds[nextProps.productNames.indexOf(nextProps.selectedProduct.hooks[nextProps.id])] : nextProps.productIds[0]))\r\n//         .then(response => {\r\n//           console.log(response.data)\r\n//           this.setState({\r\n//             currentProperty: response.data,\r\n//             currentName: nextProps.selectedProduct != null ? nextProps.selectedProduct.hooks[nextProps.id] : '',\r\n//             loaded: true\r\n//           })\r\n//         })\r\n//     }\r\n//   }\r\n// }\r\n//\r\n// export default class CreatePopup extends React.Component{\r\n//\r\n//   constructor(props) {\r\n//     super(props)\r\n//\r\n//     this.state = {\r\n//       hooks: 1,\r\n//       edit: false\r\n//     }\r\n//\r\n//     this.addHook = this.addHook.bind(this)\r\n//     this.hidePopup = this.hidePopup.bind(this)\r\n//     this.createTracker = this.createTracker.bind(this)\r\n//     this.resetPopup = this.resetPopup.bind(this)\r\n//     this.renderHooks = this.renderHooks.bind(this)\r\n//     this.validateFields = this.validateFields.bind(this)\r\n//   }\r\n//\r\n//   resetPopup() {\r\n//     document.querySelectorAll('.pForm').forEach(form => {\r\n//       console.log(form)\r\n//       form.reset()\r\n//     })\r\n//\r\n//     this.setState({\r\n//       hooks: 1\r\n//     })\r\n//   }\r\n//\r\n//   hidePopup() {\r\n//       document.querySelector('.popup-wrapper').style.display = \"none\"\r\n//       document.querySelector(\"body\").style.overflow = \"visible\";\r\n//       this.resetPopup()\r\n//   }\r\n//\r\n//   async createTracker() {\r\n//\r\n//     if (!this.validateFields()) {\r\n//       alert(\"Please fill out all fields\")\r\n//     }\r\n//     else {\r\n//       document.querySelector('.loading-wrapper').style.display = \"initial\"\r\n//\r\n//       var newTracker = {}\r\n//       var fieldNames = [\"name\", \"qty\", 'link']\r\n//       var fieldValues = document.querySelectorAll('.popup-form')\r\n//\r\n//       for (var i = 0; i < fieldNames.length; i++) {\r\n//         newTracker[fieldNames[i]] = fieldValues[i].value\r\n//       }\r\n//\r\n//       newTracker.hooks = Array.from(document.querySelectorAll('#hooks-select')).map(hook => hook.value)\r\n//       newTracker.losses = Array.from(document.querySelectorAll('.losses-select')).map(loss => loss.value)\r\n//\r\n//       var properties = []\r\n//       var propertyList = document.querySelectorAll('#property-select')\r\n//       var property = {}\r\n//       for (var i = 0; i < propertyList.length; i += 2) {\r\n//\r\n//         if (propertyList[i].classList.contains(\"end\")) {\r\n//\r\n//           properties.push(property)\r\n//           property = {}\r\n//         }\r\n//         else {\r\n//           property[propertyList[i].innerText] = propertyList[i + 1].value\r\n//         }\r\n//       }\r\n//\r\n//       newTracker.properties = properties\r\n//\r\n//       if (this.props.selectedProduct == null) {\r\n//         axios.post(\"http://localhost:5000/trackers/addTracker\", newTracker)\r\n//           .then(res => {\r\n//             newTracker._id = res.data._id\r\n//             newTracker.imgSrc = res.data.src\r\n//             newTracker.buyDate = res.data.buyDate\r\n//\r\n//             this.props.add(newTracker)\r\n//\r\n//             document.querySelector('.loading-wrapper').style.display = \"none\"\r\n//             this.hidePopup()\r\n//           })\r\n//       }\r\n//       else {\r\n//         newTracker._id = this.props.selectedProduct._id\r\n//         newTracker.imgSrc = this.props.selectedProduct.imgSrc\r\n//\r\n//         var result = await axios.post(\"http://localhost:5000/trackers/updateTracker/\" + this.props.selectedProduct._id, newTracker)\r\n//         newTracker.buyDate = result.data.buyDate\r\n//         this.props.updateProduct(newTracker)\r\n//\r\n//         document.querySelector('.loading-wrapper').style.display = \"none\"\r\n//         this.hidePopup()\r\n//       }\r\n//     }\r\n//   }\r\n//\r\n//   addHook() {\r\n//     this.setState({\r\n//       hooks: this.state.hooks + 1\r\n//     })\r\n//   }\r\n//\r\n//   renderHooks() {\r\n//     var hookList = []\r\n//\r\n//     for (var i = 0; i < this.state.hooks; i++) {\r\n//       hookList.push(<Hook id = {i} key = {i} productNames = {this.props.productNames} productIds = {this.props.productIds} selectedProduct={this.props.selectedProduct} displayProperties={this.displayProperties}/>)\r\n//     }\r\n//\r\n//     return hookList\r\n//   }\r\n//\r\n//   validateFields() {\r\n//\r\n//     var textFields = document.querySelectorAll(\".popup-form\")\r\n//     for (var i = 0; i < textFields.length; i++) {\r\n//       if (textFields[i].value == \"\") {\r\n//         return false\r\n//       }\r\n//     }\r\n//\r\n//     var hookFields = document.querySelectorAll(\".hooks-field\")\r\n//     for (var i = 0; i < hookFields.length; i++) {\r\n//       if (hookFields[i].value == \"\") {\r\n//         return false\r\n//       }\r\n//     }\r\n//     return true\r\n//   }\r\n//\r\n//   render() {\r\n//     return (\r\n//       <div class = \"popup-wrapper\">\r\n//         <div class = \"loading-wrapper\">\r\n//           <img src = \"https://upload.wikimedia.org/wikipedia/commons/7/7d/Pedro_luis_romani_ruiz.gif\" class = \"popup-loading\"></img>\r\n//         </div>\r\n//         <div class = \"popup\">\r\n//           <svg onClick={this.hidePopup} xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\r\n//             <path d=\"M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z\"/>\r\n//           </svg>\r\n//           <h1 class = \"text-center\">{this.props.selectedProduct != null ? 'Edit Tracker' : 'Create Tracker'}</h1>\r\n//           <Form className = \"pForm\">\r\n//             <Row>\r\n//               <Col md = {8}>\r\n//                 <Form.Label>Name</Form.Label>\r\n//                 <Form.Control className = \"popup-form\" type=\"text\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.name : ''} placeholder=\"Enter name\" />\r\n//               </Col>\r\n//               <Col md = {4}>\r\n//                 <Form.Label>Starting Quantity</Form.Label>\r\n//                 <Form.Control className = \"popup-form\" type=\"number\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.qty : ''} placeholder=\"Enter Number\" />\r\n//               </Col>\r\n//             </Row>\r\n//             <Form.Label>Amazon Link</Form.Label>\r\n//             <Form.Control className = \"popup-form\" type=\"text\" defaultValue={this.props.selectedProduct != null ? this.props.selectedProduct.link : ''} placeholder=\"Enter Link\" />\r\n//           </Form>\r\n//\r\n//           <div class = \"hooks-header\">\r\n//             <h3>Hooks with Etsy</h3>\r\n//             <Button onClick = {this.addHook}>Add New Hook</Button>\r\n//           </div>\r\n//           <div class = \"hooks\">\r\n//             <form className = \"pForm\">\r\n//               {this.renderHooks()}\r\n//             </form>\r\n//           </div>\r\n//\r\n//           <Button onClick = {this.createTracker} id = \"create-tracker-btn\">{this.props.selectedProduct != null ? 'Edit Tracker' : 'Create Tracker'}</Button>\r\n//         </div>\r\n//       </div>\r\n//     )\r\n//   }\r\n//\r\n//   UNSAFE_componentWillReceiveProps(nextProps) {\r\n//     if (document.querySelector('.popup-wrapper').style.display == \"initial\") {\r\n//       document.querySelector(\"body\").style.overflow = \"hidden\";\r\n//     }\r\n//\r\n//     if (nextProps.selectedProduct != null) {\r\n//       console.log(nextProps.selectedProduct)\r\n//       this.setState({\r\n//         hooks: nextProps.selectedProduct.hooks.length\r\n//       })\r\n//     }\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}